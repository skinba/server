{"version":3,"sources":["../../../src/api/controllers/user.controller.js"],"names":["signup","req","res","schema","Joi","object","keys","name","string","required","mobileno","number","password","validate","body","error","value","details","status","HttpStatus","BAD_REQUEST","json","User","create","then","user","catch","INTERNAL_SERVER_ERROR","err","login","userData","findOne","bcryptjs","compare","matched","UNAUTHORIZED","token","jwt","sign","id","_id","devConfig","secret","expiresIn","console","test"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAIgB;AACNA,UADM;AAAA,4FACCC,GADD,EACKC,GADL;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEFC,kCAFE,GAEOC,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC7BC,sCAAMH,cAAII,MAAJ,GAAaC,QAAb,EADuB;AAE7BC,0CAAUN,cAAIO,MAAJ,GAAaF,QAAb,EAFmB;AAG7BG,0CAAUR,cAAII,MAAJ,GAAaC,QAAb;;AAHmB,6BAAlB,CAFP;AAAA,4CAWJL,cAAIS,QAAJ,CAAaZ,IAAIa,IAAjB,EAAuBX,MAAvB,CAXI,EASJY,KATI,iBASJA,KATI,EAUJC,KAVI,iBAUJA,KAVI;;AAAA,kCAYJD,SAASA,MAAME,OAZX;AAAA;AAAA;AAAA;;AAAA,6DAaGf,IAAIgB,MAAJ,CAAWC,0BAAWC,WAAtB,EAAmCC,IAAnC,CAAwCN,KAAxC,CAbH;;AAAA;AAeRO,2CAAKC,MAAL,CAAYP,KAAZ,EACCQ,IADD,CACM;AAAA,uCAAQtB,IAAImB,IAAJ,CAASI,IAAT,CAAR;AAAA,6BADN,EAECC,KAFD,CAEO;AAAA,uCAAOxB,IAAIgB,MAAJ,CAAWC,0BAAWQ,qBAAtB,EAA6CN,IAA7C,CAAkDO,GAAlD,CAAP;AAAA,6BAFP;;AAfQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAoBZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACA;AACA;AACA;AACA;AACG;AACH;AACA;AACA;AACG;AACH;AACA;AACG;AACA;AACA;AACA;;AAEMC,SAnDM;AAAA,8FAmDA5B,GAnDA,EAmDKC,GAnDL;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqDA4B,oCArDA,GAqDW7B,IAAIa,IArDf;AAuDEX,kCAvDF,GAuDWC,cAAIC,MAAJ,GAAaC,IAAb,CAAkB;AAC7BI,0CAAUN,cAAIO,MAAJ,GAAaF,QAAb,EADmB;AAE7BG,0CAAUR,cAAII,MAAJ,GAAaC,QAAb;;AAFmB,6BAAlB,CAvDX;AAAA,6CA+DQL,cAAIS,QAAJ,CAAaZ,IAAIa,IAAjB,EAAuBX,MAAvB,CA/DR,EA6DQY,KA7DR,kBA6DQA,KA7DR,EA8DQC,KA9DR,kBA8DQA,KA9DR;;AAAA,kCAgETD,SAASA,MAAME,OAhEN;AAAA;AAAA;AAAA;;AAAA,8DAiELf,IAAIgB,MAAJ,CAAWC,0BAAWC,WAAtB,EAAmCC,IAAnC,CAAwCN,KAAxC,CAjEK;;AAAA;AAAA;AAAA,mCAmEMO,eAAKS,OAAL,CAAa,EAAErB,UAAUoB,SAASpB,QAArB,EAAb,CAnEN;;AAAA;AAmEPe,gCAnEO;;AAAA,gCAoERA,IApEQ;AAAA;AAAA;AAAA;;AAAA,8DAqELvB,IACLgB,MADK,CACEC,0BAAWC,WADb,EAELC,IAFK,CAEA,EAAEO,KAAK,8BAAP,EAFA,CArEK;;AAAA;AAAA;AAAA,mCAyESI,mBAASC,OAAT,CAAiBH,SAASlB,QAA1B,EAAoCa,KAAKb,QAAzC,CAzET;;AAAA;AAyEPsB,mCAzEO;;AAAA,gCA0ERA,OA1EQ;AAAA;AAAA;AAAA;;AAAA,8DA2ELhC,IAAIgB,MAAJ,CAAWC,0BAAWgB,YAAtB,EAAoCd,IAApC,CAAyC,EAAEO,KAAK,qBAAP,EAAzC,CA3EK;;AAAA;AA6EPQ,iCA7EO,GA6ECC,uBAAIC,IAAJ,CAAS,EAAEC,IAAId,KAAKe,GAAX,EAAT,EAA0BC,uBAAUC,MAApC,EAA4C;AACzDC,2CAAW;AAD8C,6BAA5C,CA7ED;AAAA,8DAgFGzC,IAAImB,IAAJ,CAAS,EAAEI,UAAF,EAAQW,YAAR,EAAT,CAhFH;;AAAA;AAAA;AAAA;;AAmFbQ,oCAAQ7B,KAAR;AAnFa,8DAoFNb,IAAIgB,MAAJ,CAAWC,0BAAWQ,qBAAtB,EAA6CN,IAA7C,cApFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwFNwB,QAxFM;AAAA,8FAwFD5C,GAxFC,EAwFGC,GAxFH;AAAA;AAAA;AAAA;AAAA;AAAA,8DAyFDA,IAAImB,IAAJ,CAASpB,IAAIwB,IAAb,CAzFC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,C","file":"user.controller.js","sourcesContent":["import bcryptjs from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport User from \"../model/user.model\";\r\nimport HttpStatus from \"http-status-codes\";\r\nimport Joi from \"joi\";\r\nimport { devConfig } from \"../../config/env/development\";\r\n\r\n\r\n\r\n export default {\r\n    async signup(req,res) {\r\n        const schema = Joi.object().keys({\r\n            name: Joi.string().required(),\r\n            mobileno: Joi.number().required(),\r\n            password: Joi.string().required(),\r\n            \r\n        });\r\n        const {\r\n            error,\r\n            value\r\n        } = Joi.validate(req.body, schema);\r\n        if (error && error.details) {\r\n            return res.status(HttpStatus.BAD_REQUEST).json(error);\r\n        }\r\n        User.create(value)\r\n        .then(user => res.json(user))\r\n        .catch(err => res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err))\r\n    },\r\n\r\n    // async login(req,res) {\r\n    //     const schema = Joi.object().keys({\r\n    //         email: Joi.string().email().required(),\r\n    //         password: Joi.string().required(),\r\n            \r\n    //     });\r\n    //     const {\r\n    //         error,\r\n    //         value\r\n    //     } = Joi.validate(req.body, schema);\r\n    //     if (error && error.details) {\r\n    //         return res.status(HttpStatus.BAD_REQUEST).json(error);\r\n    //     }\r\n    //      const user = await User.findOne({ email: value.email });\r\n\t// \t\tif (!user) {\r\n\t// \t\t\treturn res\r\n\t// \t\t\t\t.status(BAD_REQUEST)\r\n\t// \t\t\t\t.json({ err: 'invalid email or password' });\r\n\t// \t\t}\r\n    //     const matched = await bcryptjs.compare(value.password, user.password);\r\n\t// \t\tif (!matched) {\r\n\t// \t\t\treturn res.status(UNAUTHORIZED).json({ err: 'invalid credentials' });\r\n\t// \t\t}\r\n    //         const token = jwt.sign({ id: user._id }, 'aght123', {\r\n\t// \t\t\texpiresIn: '1d'\r\n\t// \t\t});\r\n    //     User.create(value)\r\n    //     .then(user => res.json({success:true,token}))\r\n    //     .catch(err => res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err))\r\n    // },\r\n\r\n    async login(req, res) {\r\n\t\ttry {\r\n            let userData = req.body\r\n\r\n            const schema = Joi.object().keys({\r\n                mobileno: Joi.number().required(),\r\n                password: Joi.string().required(),\r\n                        \r\n                    });\r\n                    const {\r\n                        error,\r\n                        value\r\n                    } = Joi.validate(req.body, schema);\r\n\t\t\tif (error && error.details) {\r\n\t\t\t\treturn res.status(HttpStatus.BAD_REQUEST).json(error);\r\n\t\t\t}\r\n\t\t\tconst user = await User.findOne({ mobileno: userData.mobileno });\r\n\t\t\tif (!user) {\r\n\t\t\t\treturn res\r\n\t\t\t\t\t.status(HttpStatus.BAD_REQUEST)\r\n\t\t\t\t\t.json({ err: 'invalid mobileno or password' });\r\n\t\t\t}\r\n\t\t\tconst matched = await bcryptjs.compare(userData.password, user.password);\r\n\t\t\tif (!matched) {\r\n\t\t\t\treturn res.status(HttpStatus.UNAUTHORIZED).json({ err: 'invalid credentials' });\r\n\t\t\t}\r\n\t\t\tconst token = jwt.sign({ id: user._id },devConfig.secret, {\r\n\t\t\t\texpiresIn: '1d'\r\n\t\t\t});\r\n            return res.json({ user, token }); \r\n\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t\treturn res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err);\r\n\t\t}\r\n    },\r\n    \r\n    async test(req,res){\r\n        return res.json(req.user)\r\n    }\r\n    \r\n}"]}
{"version":3,"sources":["../../../src/api/controllers/appointments.controller.js"],"names":["create","req","res","schema","Joi","object","keys","tokenno","string","required","date","time","name","phoneno","number","integer","location","optional","note","status","validate","body","error","value","details","HttpStatus","BAD_REQUEST","json","Appointment","then","appointment","catch","INTERNAL_SERVER_ERROR","err","findall","find","findOne","id","params","findById","NOT_FOUND","delete","findByIdAndRemove","update","findOneAndUpdate","_id","$set","new","getall","console","log","token","i","parseInt","sort","updat"],"mappings":"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","file":"appointments.controller.js","sourcesContent":["import Appointment from \"../model/appointment.model\";\r\nimport HttpStatus from \"http-status-codes\";\r\nimport Joi from \"joi\";\r\n\r\nexport default {\r\n    create(req, res) {\r\n        const schema = Joi.object().keys({\r\n            tokenno: Joi.string().required(),\r\n            date: Joi.string().required(),\r\n            time: Joi.string().required(),\r\n            name: Joi.string().required(),\r\n            phoneno: Joi.number()\r\n                .integer()\r\n                .required(),\r\n            location: Joi.string().optional(),\r\n            note: Joi.string().optional(),\r\n            status: Joi.string().optional()\r\n        });\r\n        const {\r\n            error,\r\n            value\r\n        } = Joi.validate(req.body, schema);\r\n        if (error && error.details) {\r\n            return res.status(HttpStatus.BAD_REQUEST).json(error);\r\n        }\r\n        Appointment.create(value)\r\n            .then(appointment => res.json(appointment))\r\n            .catch(err => res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err));\r\n    },\r\n\r\n    findall(req, res) {\r\n        Appointment.find()\r\n            .then(appointment => res.json(appointment))\r\n            .catch(err => res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err));\r\n        // .sort({\r\n        //     _id: -1\r\n        // }).limit(1)\r\n    },\r\n\r\n    findOne(req, res) {\r\n        const {\r\n            id\r\n        } = req.params;\r\n        Appointment.findById(id)\r\n            .then(appointment => {\r\n                if (!appointment) {\r\n                    return res.status(HttpStatus.NOT_FOUND).json({\r\n                        err: \"Could not find any appointment\"\r\n                    });\r\n                }\r\n                return res.json(appointment);\r\n            })\r\n            .catch(err => {\r\n                return res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err);\r\n            });\r\n    },\r\n\r\n    delete(req, res) {\r\n        const {\r\n            id\r\n        } = req.params;\r\n        Appointment.findByIdAndRemove(id)\r\n            .then(appointment => {\r\n                if (!appointment) {\r\n                    return res.status(HttpStatus.NOT_FOUND).json({\r\n                        err: \"Could not delete any appointment\"\r\n                    });\r\n                }\r\n                return res.json(appointment);\r\n            })\r\n            .catch(err => res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err));\r\n    },\r\n    // update(req, res) {\r\n    //     const id = req.params;\r\n    //     const schema = Joi.object().keys({\r\n    //         tokenno: Joi.string().optional(),\r\n    //         time: Joi.string().optional(),\r\n    //         name: Joi.string().optional(),\r\n    //         phoneno: Joi.number()\r\n    //             .integer()\r\n    //             .optional(),\r\n    //         location: Joi.string().optional(),\r\n    //         note: Joi.string().optional()\r\n    //     });\r\n    //     const {\r\n    //         error,\r\n    //         value\r\n    //     } = Joi.validate(req.body, schema);\r\n    //     if (error) {\r\n    //         return res.status(HttpStatus.BAD_REQUEST).json(error.details);\r\n    //     }\r\n    //     Appointment.findOneAndUpdate({\r\n    //             _id: id\r\n    //         }, value, {\r\n    //             new: true\r\n    //         })\r\n    //         .then(appointment => res.json(appointment))\r\n    //         .catch(err => res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err));\r\n    // },\r\n    update(req, res) {\r\n        const {\r\n            id\r\n        } = req.params;\r\n        Appointment.findOneAndUpdate({\r\n                _id: id\r\n            }, {\r\n                $set: {\r\n                    tokenno: req.body.tokenno,\r\n                    date: req.body.date,\r\n                    time: req.body.time,\r\n                    name: req.body.name,\r\n                    phoneno: req.body.phoneno,\r\n                    location: req.body.location,\r\n                    note: req.body.note\r\n                }\r\n            }, {\r\n                new: true\r\n            })\r\n\r\n            .then(appointment => res.json(appointment))\r\n            .catch(err => res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err));\r\n    },\r\n    getall(req, res) {\r\n        Appointment.find(function (err, appointment) {\r\n                if (err) {\r\n                    console.log('no data');\r\n                } else {\r\n                    var token = appointment[0].tokenno;\r\n                    var i = parseInt(token);\r\n                    var tokenno = i + 1;\r\n                    // console.log(tokenno)\r\n                    res.json(tokenno);\r\n                }\r\n            })\r\n            .sort({\r\n                _id: -1\r\n            });\r\n    },\r\n\r\n    updat(req, res) {\r\n        const {\r\n            id\r\n        } = req.params;\r\n        Appointment.findOneAndUpdate({\r\n                _id: id\r\n            }, {\r\n                $set: {\r\n                    status: req.body.status\r\n                }\r\n            }, {\r\n                new: true\r\n            })\r\n\r\n            .then(appointment => res.json(appointment))\r\n            .catch(err => res.status(HttpStatus.INTERNAL_SERVER_ERROR).json(err));\r\n    },\r\n\r\n\r\n};"]}